<?php

/**
 * @file
 * Contains commerce_add_to_cart_popup_form.module.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\Entity\EntityViewDisplay;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function commerce_add_to_cart_popup_form_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the commerce_add_to_cart_popup_form module.
    case 'help.page.commerce_add_to_cart_popup_form':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Show the add to cart form in a modal window.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function commerce_add_to_cart_popup_form_theme($existing, $type, $theme, $path) {
  return [
    'commerce_add_to_cart_popup_link' => [
      'variables' => [
        'link' => [],
        'product_entity' => NULL,
        'view_mode' => NULL,
        'display' => NULL,
      ],
    ],
    'commerce_add_to_cart_popup_form' => [
      'variables' => [
        'product' => NULL,
        'product_entity' => NULL,
      ],
    ],
    'commerce_add_to_cart_popup_success' => [
      'variables' => [
        'content' => [],
        'product_entity' => NULL,
        'selected_variation' => NULL,
      ],
    ],
  ];
}

/**
 * Prepares variables for the commerce add to cart pop-up form template.
 */
function template_preprocess_commerce_add_to_cart_popup_form(&$variables) {
  $variables['attributes']['id'] = 'commerce-add-to-cart-popup-form-modal-wrapper';
}

/**
 * Implements hook_entity_type_build().
 */
function commerce_add_to_cart_popup_form_entity_type_build(array &$entity_types) {
  // Register the custom add to cart form for pop-ups.
  $entity_types['commerce_order_item']->setFormClass('commerce_add_to_cart_popup_form', 'Drupal\commerce_add_to_cart_popup_form\Form\AddToCartPopUpForm');
  // Register the custom product view builder for pop-ups.
  $entity_types['commerce_product']->setHandlerClass('popup_view_builder', 'Drupal\commerce_add_to_cart_popup_form\ProductPopUpViewBuilder');
}

/**
 * Implements hook_entity_extra_field_info().
 */
function commerce_add_to_cart_popup_form_entity_extra_field_info() {
  $extra = [];
  // Add a cart pop-up form pseudo-field for each product type.
  $bundles = \Drupal::service('entity_type.bundle.info')->getBundleInfo('commerce_product');
  foreach ($bundles as $id => $bundle) {
    $extra['commerce_product'][$id]['display']['commerce_add_to_cart_popup_form'] = [
      'label' => t('Add to cart pop-up form'),
      'description' => t('Add to cart button that triggers pop-up cart form.'),
      'weight' => 10,
      'visible' => FALSE,
    ];
  }
  return $extra;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_add_to_cart_popup_form_form_entity_view_display_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Check our extra field is applicable to the entity type and bundle
  // and is present in the form.
  $extra = commerce_add_to_cart_popup_form_entity_extra_field_info();
  $entity_type = $form['#entity_type'];
  $bundle = $form['#bundle'];
  if (!isset($extra[$entity_type], $extra[$entity_type][$bundle], $form['fields']['commerce_add_to_cart_popup_form'])) {
    return;
  }

  $display = $form_state->getFormObject()->getEntity();

  // Provide settings as a summary if the component is present.
  if ($display->getComponent('commerce_add_to_cart_popup_form')) {
    $settings = $display->getThirdPartySetting('commerce_add_to_cart_popup_form', 'field_settings');
    $form['fields']['commerce_add_to_cart_popup_form']['settings_summary'] = [
      'combine' => [
        '#type' => 'checkbox',
        '#title' => t('Combine order items containing the same product variation.'),
        '#default_value' => $settings['combine'] ?? NULL,
      ],
      'display' => [
        '#type' => 'fieldset',
        '#title' => t('Modal settings'),
        '#attributes' => [
          'class' => ['form--inline'],
        ],
        'width' => [
          '#type' => 'textfield',
          '#title' => t('Width'),
          '#default_value' => $settings['display']['width'] ?? 800,
          '#size' => 5,
        ],
        'height' => [
          '#type' => 'textfield',
          '#title' => t('Height'),
          '#default_value' => $settings['display']['height'] ?? NULL,
          '#size' => 5,
        ],
      ],
    ];
  }

  // Add an entity builder to save the setting in the EntityViewDisplay entity.
  $form['#entity_builders'][] = 'commerce_add_to_cart_popup_form_form_entity_view_display_edit_form_builder';
}

/**
 * Entity builder for the Product entity "manage display" form.
 */
function commerce_add_to_cart_popup_form_form_entity_view_display_edit_form_builder($entity_type, EntityViewDisplay $display, &$form, FormStateInterface $form_state) {
  $values = $form_state->getValues();
  if (isset($values['fields']['commerce_add_to_cart_popup_form']['settings_summary'])) {
    // Save the setting as stored configuration on the EntityViewDisplay entity.
    $settings = $values['fields']['commerce_add_to_cart_popup_form']['settings_summary'];
    $display->setThirdPartySetting('commerce_add_to_cart_popup_form', 'field_settings', $settings);
    return;
  }
  $display->unsetThirdPartySetting('commerce_add_to_cart_popup_form', 'field_settings');
}


/**
 * Implements hook_ENTITY_TYPE_view().
 */
function commerce_add_to_cart_popup_form_commerce_product_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  /** @var \Drupal\commerce_add_to_cart_popup_form\AddToCartPopUpManagerInterface $add_to_cart_popup_manager */
  $add_to_cart_popup_manager = \Drupal::service('commerce_add_to_cart_popup_form.add_to_cart_popup_manager');
  $add_to_cart_popup_manager->buildAddToCartLink($build, $entity, $display, $view_mode);
}
